@page "/api/Promocion_Producto/Lista"
@inject IHTTPServicio http;
@inject NavigationManager navigationManager;



<h1 class="text-center mb-4 text-primary fw-bold">
    <i class="bi bi-tags-fill me-2"></i>Promociones de productos
</h1>

<div class="container mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <p class="mb-0 fw-semibold text-muted">
            Para registrar una nueva promoción, hacé click en el botón:
        </p>
        <a class="btn btn-outline-primary shadow-sm" href="/api/Promocion_Producto/Crear">
            <i class="bi bi-plus-circle me-1"></i> Crear promoción de producto
        </a>
    </div>
</div>

<div class="container">
    @if (Mensaje == null)
    {
        @if (ListaPromo_prod == null)
        {
            <div class="alert alert-secondary text-center shadow-sm" role="alert">
                <i class="bi bi-arrow-repeat me-2"></i>Buscando promociones...
            </div>
        }
        else if (ListaPromo_prod.Count == 0)
        {
            <div class="alert alert-warning text-center shadow-sm" role="alert">
                <i class="bi bi-exclamation-triangle-fill me-2"></i>No existen promociones de productos
            </div>
        }
        else
        {
            <div class="table-responsive shadow-sm">
                <table class="table table-bordered table-hover align-middle">
                    <thead class="table-primary text-center">
                        <tr>
                            <th><i class="bi bi-box-seam me-1"></i>Producto</th>
                            <th><i class="bi bi-calendar-event me-1"></i>Desde</th>
                            <th><i class="bi bi-calendar-check me-1"></i>Hasta</th>
                            <th><i class="bi bi-percent me-1"></i>Descuento</th>
                            <th><i class="bi bi-currency-dollar me-1"></i>Precio promo</th>
                            <th class="text-center"><i class="bi bi-gear-fill me-1"></i>Acción</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ListaPromo_prod)
                        {
                            <tr>
                                <td>@item.Nombre_Producto</td>
                                <td>@item.FechaDesde.ToShortDateString()</td>
                                <td>@item.FechaHasta.ToShortDateString()</td>
                                <td>@item.Descuento_Porcentaje%</td>
                                <td>$@item.Precio_Promocional</td>
                                <td class="text-center">
                                    <button class="btn btn-sm btn-danger shadow-sm" @onclick="() => ConfirmarEliminar(item)">
                                        <i class="bi bi-trash-fill me-1"></i>Eliminar
                                    </button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger text-center shadow-sm" role="alert">
            <i class="bi bi-x-circle-fill me-2"></i>Error: @Mensaje
        </div>
    }
</div>

<Confirmacion @ref="confirmacion"
              Titulo="⚠️ Confirmar eliminación"
              textCancelar="Cancelar"
              onCancel="@Cancelar"
              onConfirm="@Eliminar">
    <h5 class="text-danger text-center">
        <i class="bi bi-exclamation-octagon-fill me-2"></i>¿Seguro que desea eliminar esta promoción?
    </h5>
</Confirmacion>

@code {

    Confirmacion confirmacion;   // agregado
    Promocion_Producto PromoAEliminar;   // agregado


    List<Promocion_Producto> ListaPromo_prod;
    Usuario usuario;

    string Mensaje;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await Leer();
    }

    #region Leer promociones de productos
    private async Task Leer()
    {
        var resp = await http.Get<List<Promocion_Producto>>("/api/Promocion_Producto");

        string Mensaje = "";

        if (!resp.Error)
        {
            ListaPromo_prod = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }


    }
    #endregion


    // preparar la confirmación
    private void ConfirmarEliminar(Promocion_Producto promo)
    {
        PromoAEliminar = promo;
        confirmacion.Ver();
    }

    // cancelar eliminación
    private void Cancelar()
    {
        PromoAEliminar = null;
        confirmacion.Ocultar();
    }

    // ejecutar eliminación
    private async Task Eliminar()
    {
        if (PromoAEliminar == null)
        {
            confirmacion.Ocultar();
            return;
        }

        var respuesta = await http.Delete($"/api/Promocion_Producto/{PromoAEliminar.Id}");

        if (respuesta.Error)
        {
            Mensaje = "❌ No se pudo eliminar la promoción";
        }
        else
        {
            await Leer(); // refrescar lista
        }

        PromoAEliminar = null;
        confirmacion.Ocultar();
    }


}







