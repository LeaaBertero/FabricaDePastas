@page "/api/Detalle_Lista_Precio/Lista"
@using FabricaPastas.Client.Shared
@inject IHTTPServicio http;
@inject NavigationManager navigationManager;


@* <div>
    <p>Para registrarte, hace click en el botón</p>
    <a class="btn btn-primary" href="/api/Detalle_Lista_Precio/Crear">cargar detalle lista de precio</a>
</div>

<table>

<tr>
    <th>Detalle lista de precio</th>
</tr>

@if (Mensaje == null)
{
    if (ListaDetalleLista_precio == null)
    {
        <p>Buscando....</p>
    }
    else if (ListaDetalleLista_precio.Count == 0)
    {
        <p>No ningún detalle de lista de precios </p>
    }
    else
    {
        @foreach (var item in ListaDetalleLista_precio)
        {
                            
            <tr>

                <td>@item.Precio_Personalizado</td>
                                
            </tr>

               

 

        }
    }
}
else
{
    <p> Error: @Mensaje</p>
}


</table> *@

<h1 class="text-center mb-4 text-primary fw-bold">📑 Detalle de lista de precios</h1>

<div class="container mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <p class="mb-0 fw-semibold">Para registrar un nuevo detalle, hacé click en el botón:</p>
        <a class="btn btn-primary" href="/api/Detalle_Lista_Precio/Crear">➕ Cargar detalle</a>
    </div>
</div>

<div class="container">
    @if (Mensaje == null)
    {
        @if (ListaDetalleLista_precio == null)
        {
            <div class="alert alert-secondary text-center">🔄 Buscando detalles de precios...</div>
        }
        else if (ListaDetalleLista_precio.Count == 0)
        {
            <div class="alert alert-warning text-center">⚠️ No hay detalles de lista de precios cargados</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-bordered table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>💲 Precio personalizado</th>
                            <th class="text-center">Modificar</th>
                            <th class="text-center">Eliminar</th>

                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ListaDetalleLista_precio)
                        {
                            <tr>
                                <td>$@item.Precio_Personalizado</td>

                            </tr>

                        <td class="text-center">
                            <a class="btn btn-warning btn-sm" href="/api/Detalle_Lista_Precio/Editar/@item.Id">✏️ Modificar</a>
                        </td>
                        <td class="text-center">
                            <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(item)">🗑️ Borrar</button>
                        </td>



                        }
                    </tbody>
                </table>
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger text-center">❌ Error: @Mensaje</div>
    }
</div>


<Confirmacion @ref="confirmacion"
              Titulo="⚠️ Alerta"
              textCancelar="Cancelar"
              onCancel="@Cancelar"
              onConfirm="@Eliminar">
    <h5 class="text-danger text-center">Está por eliminar un Precio. ¿Desea continuar?</h5>
</Confirmacion>

       

@code {
    Confirmacion confirmacion;

    List<Detalle_Lista_Precio> ListaDetalleLista_precio;

    string Mensaje;

    // 🔹 Cambiar el tipo aquí: antes era ListaDetalle_Lista_Precio
    Detalle_Lista_Precio? ListaDetalleBorrar = null;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await Leer();
    }

    #region Leer usuarios
    private async Task Leer()
    {
        var resp = await http.Get<List<Detalle_Lista_Precio>>("api/Detalle_Lista_Precio");

        string Mensaje = "";

        if (!resp.Error)
        {
            ListaDetalleLista_precio = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }
    #endregion


    private async Task Eliminar(Detalle_Lista_Precio listaDetalle_Lista_Precio)
    {
        ListaDetalleBorrar = listaDetalle_Lista_Precio;
        confirmacion.Ver();
    }

    // cancelar: oculta modal y limpia selección
    private void Cancelar()
    {
        confirmacion.Ocultar();
        ListaDetalleBorrar = null;
    }

    // CORREGIDO: método sin parámetros invocado por onConfirm="@Borrar"
    private async Task Eliminar()
    {
        if (ListaDetalleBorrar == null)
        {
            confirmacion.Ocultar();
            return;
        }

        var respuesta = await http.Delete($"api/Detalle_Lista_Precio/{ListaDetalleBorrar.Id}");

        if (respuesta.Error)
        {
            Mensaje = "No se pudo borrar el Precio";
        }
        else
        {
            await Leer();
        }

        // limpiar y cerrar modal
        ListaDetalleBorrar = null;
        confirmacion.Ocultar();
    }

}

    

    






