@page "/LoginUsuarios"
@inject IHTTPServicio http
@inject HttpClient Http;
@inject NavigationManager navigationManager


<h1 class="text-center mb-4">🔐 Iniciar sesión</h1>

<EditForm Model="usuarioLogin" OnValidSubmit="IniciarSesion" class="container">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row justify-content-center">
        
        <div class="col-md-6">
            
            <div class="mb-3">
                <label for="NombreUsuario" class="form-label">Usuario</label>
                <InputText id="NombreUsuario" @bind-Value="usuarioLogin.NombreUsuario" class="form-control" placeholder="Ej: user@user.com" />
                <ValidationMessage For="@(() => usuarioLogin.NombreUsuario)" />
            </div>

            <div class="mb-3">
                <label for="Contraseña" class="form-label">Contraseña</label>
                <InputText id="Contraseña" @bind-Value="usuarioLogin.Contraseña" type="password" class="form-control" placeholder="••••••••" />
                <ValidationMessage For="@(() => usuarioLogin.Contraseña)" />
            </div>

            <div class="col-12 text-center mt-4">
                <button class="btn btn-success me-2" type="submit">✅ Iniciar sesión</button>
                
            </div>

         
        </div>

    </div>


</EditForm>

@code {
   
    //selecciona el rol de usuario
    private string TipoClienteSeleccionado;

    private List<Tipo_Cliente> ListaTipoCliente;

    // private List<Tipo_Cliente> ListaTipoClientes;

    string Mensaje;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ListaTipoCliente = await Http.GetFromJsonAsync<List<Tipo_Cliente>>("api/Tipo_Cliente");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error obteniendo tipos de cliente: {ex.Message}");
        }
    }

    private void IngresarConTipoCliente()
    {
        if (!string.IsNullOrEmpty(TipoClienteSeleccionado))
        {
            navigationManager.NavigateTo($"/api/Categoria_Producto/Lista");
        }
    }
    
    private CrearLoginDTO usuarioLogin = new CrearLoginDTO();

    private async Task IniciarSesion()
    {
        // var httpRespuesta = await http.Post<Usuario>("/api/Usuario/Login", usuarioLogin );
        var httpRespuesta = await http.Post<CrearLoginDTO>("/api/Usuario/Login", usuarioLogin);
        

      
    }
}
