@page "/api/Producto/Editar/{ProductoId:int}"
@inject IHTTPServicio http;
@inject NavigationManager navigationManager;

<h1 class="text-center mb-4 text-warning fw-bold">
    <i class="bi bi-pencil-square me-2"></i>Editar producto
</h1>

<EditForm Model="Editar_producto" OnValidSubmit="Grabar" class="container">
    <DataAnnotationsValidator />

    <div class="card shadow-sm border-start border-4 border-warning mb-5">
        <div class="card-body">
            <div class="row g-4">
                <!-- Nombre -->
                <div class="col-md-6">
                    <label for="nombre" class="form-label fw-semibold">
                        <i class="bi bi-tag-fill me-1"></i>Nombre
                    </label>
                    <input type="text" id="nombre" @bind="Editar_producto.Nombre" class="form-control" placeholder="Ej: Fideos largos" />
                    <ValidationMessage For="@(() => Editar_producto.Nombre)" />
                </div>

                <!-- Descripción -->
                <div class="col-md-6">
                    <label for="descripcion" class="form-label fw-semibold">
                        <i class="bi bi-card-text me-1"></i>Descripción
                    </label>
                    <input type="text" id="descripcion" @bind="Editar_producto.Descripcion" class="form-control" placeholder="Ej: Pasta casera sin TACC" />
                    <ValidationMessage For="@(() => Editar_producto.Descripcion)" />
                </div>

                <!-- Precio base -->
                <div class="col-md-4">
                    <label for="precio_base" class="form-label fw-semibold">
                        <i class="bi bi-currency-dollar me-1"></i>Precio base
                    </label>
                    <input type="number" id="precio_base" @bind="Editar_producto.PrecioBase" class="form-control" step="0.01" min="0" placeholder="Ej: 999.99" />
                    <ValidationMessage For="@(() => Editar_producto.PrecioBase)" />
                </div>

                <!-- Imagen -->
                <div class="col-md-4">
                    <label for="imagen_url" class="form-label fw-semibold">
                        <i class="bi bi-image me-1"></i>Imagen del producto (URL)
                    </label>
                    <input type="url" id="imagen_url" @bind="Editar_producto.Imagen_Url" class="form-control" placeholder="https://..." />
                    <ValidationMessage For="@(() => Editar_producto.Imagen_Url)" />
                </div>

                <!-- Stock -->
                <div class="col-md-4">
                    <label for="stock" class="form-label fw-semibold">
                        <i class="bi bi-stack me-1"></i>Stock disponible
                    </label>
                    <input type="number" id="stock" @bind="Editar_producto.Stock" class="form-control" step="1" min="0" placeholder="Ej: 50" />
                    <ValidationMessage For="@(() => Editar_producto.Stock)" />
                </div>

                <!-- Botones -->
                <div class="col-12 text-center mt-4">
                    <button class="btn btn-warning me-2" type="submit">
                        <i class="bi bi-check-circle-fill me-1"></i>Actualizar
                    </button>
                    <button class="btn btn-outline-secondary" type="button" @onclick="Cancelar">
                        <i class="bi bi-x-circle me-1"></i>Cancelar
                    </button>
                </div>
            </div>
        </div>
    </div>
</EditForm>

<footer class="text-center text-muted mt-5 mb-3">
    © 2023 La Nonna Personal
</footer>


@code {

    private Producto Editar_producto = new Producto();

    [Parameter]
    public int ProductoId { get; set; }



    string pepe = "";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await Mostrar();
    }

    private async Task Mostrar()
    {
        var respuesta = await http.Get<Producto>($"api/Producto/{ProductoId}");

        if (!respuesta.Error)
        {
            Editar_producto = respuesta.Respuesta;
        }
        else
        {
            navigationManager.NavigateTo("/api/Producto");
        }
    }



    private async Task Grabar()
    {
        //tDocumento.Personas = new List<Persona>();

        var httpRespuesta = await http.Put<Producto>($"api/Producto/{ProductoId}", Editar_producto);
        if (httpRespuesta.Error)
        {
            var body = httpRespuesta.HttpResponseMessage;
        }
        navigationManager.NavigateTo("/api/Producto/Lista");
    }

    private void Cancelar()
    {
        navigationManager.NavigateTo("/api/Producto/Lista");
    }

}
