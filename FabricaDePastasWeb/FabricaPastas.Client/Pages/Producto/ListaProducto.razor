@page "/api/Producto/Lista"
@inject IHTTPServicio http;
@inject NavigationManager navigationManager;



<h1 class="text-center mb-4 text-success fw-bold">🛒 Productos disponibles</h1>

<div class="container mb-4">
    <div class="d-flex justify-content-between align-items-center">
        <p class="mb-0 fw-semibold">Para registrar un nuevo producto, hacé click en el botón:</p>
        <a class="btn btn-primary" href="/api/Producto/Crear">➕ Cargar producto</a>
    </div>
</div>

<div class="container">
    @if (Mensaje == null)
    {
        @if (Lista_producto == null)
        {
            <div class="alert alert-secondary text-center">🔄 Buscando productos...</div>
        }
        else if (Lista_producto.Count == 0)
        {
            <div class="alert alert-warning text-center">⚠️ No existen productos cargados</div>
        }
        else
        {
            <div class="table-responsive">
               
                <table class="table table-bordered table-hover align-middle">
                    
                    <thead class="table-light">
                       
                        <tr>
                            <th>📦 Nombre</th>

                            <th>📝 Descripción</th>

                            <th>💰 Precio base</th>

                            <th>🖼️ Imagen</th>

                            <th>📦 Stock</th>

                            <th class="text-center">✏️ Acción</th>
                        
                        </tr>
                    
                    </thead>
                   
                    <tbody>

                        @foreach (var item in Lista_producto)
                        {
                            <tr>
                                
                                <td>@item.Nombre</td>
                                <td>@item.Descripcion</td>
                                <td>$@item.PrecioBase</td>
                                
                                <td>
                                    
                                    @if (!string.IsNullOrEmpty(item.Imagen_Url))
                                    {
                                        <img src="@item.Imagen_Url" alt="Imagen del producto" class="img-thumbnail" style="max-width: 100px;" />
                                    }
                                    else
                                    {
                                        <span class="text-muted">Sin imagen</span>
                                    }
                               
                                </td>
                            
                                <td>@item.Stock</td>
                               
                                <td class="text-center">
                                    <a class="btn btn-warning btn-sm" href="/api/Producto/Editar/@item.Id">Modificar</a>
                                    <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(item)">🗑️ Eliminar</button> @* Botón eliminar *@
                                </td>
                            
                            </tr>
                        }

                    </tbody>

                </table>

            </div>
        }
    }
    else
    {
        <div class="alert alert-danger text-center">❌ Error: @Mensaje</div>
    }
</div>


<h2>Poner un botón cancelar para que vaya a la lista de roles en la sección de administración</h2>

@* Modal de confirmación (igual que en usuarios) *@
<Confirmacion @ref="confirmacion"
              Titulo="⚠️ Alerta"
              textCancelar="Cancelar"
              onCancel="@Cancelar"
              onConfirm="@Eliminar">
    <h5 class="text-danger text-center">Está por eliminar un producto. ¿Desea continuar?</h5>
</Confirmacion>

           

@code {

    Confirmacion confirmacion;

    Producto productoBorrar;

    List<Producto> Lista_producto;

    string Mensaje;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<Producto>>("api/Producto");

        string Mensaje = "";

        if (!resp.Error)
        {
            Lista_producto = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    //  Muestra el modal de confirmación
    private void Eliminar(Producto producto)
    {
        productoBorrar = producto;
        confirmacion.Ver();
    }

    //  Cancelar cerrar modal sin borrar
    private void Cancelar()
    {
        confirmacion.Ocultar();
        productoBorrar = null;
    }

    //  Confirmar  eliminar
    private async Task Eliminar()
    {
        if (productoBorrar == null)
        {
            confirmacion.Ocultar();
            return;
        }

        var respuesta = await http.Delete($"api/Producto/{productoBorrar.Id}");

        if (respuesta.Error)
        {
            Mensaje = "❌ No se pudo borrar el producto";
        }
        else
        {
            await Leer(); // refresca lista
        }

        productoBorrar = null;
        confirmacion.Ocultar();
    }
}









