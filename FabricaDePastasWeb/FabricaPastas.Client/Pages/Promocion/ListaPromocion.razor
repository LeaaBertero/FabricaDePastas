@page "/api/Promocion/Lista"
@using FabricaPastas.Client.Shared
@inject IHTTPServicio http;
@inject NavigationManager navigationManager;



<h1 class="text-center mb-4">🎉 Promociones activas</h1>

@* <div class="container mb-3">
    <div class="d-flex justify-content-between align-items-center">
        <p class="mb-0 fw-bold text-success">¡Promoción disponible!</p>
        <a class="btn btn-success" href="/api/Promocion/Crear">➕ Cargar promoción</a>
    </div>
</div> *@

<div class="container">
    @if (Mensaje == null)
    {
        @if (ListaPromo == null)
        {
            <div class="alert alert-secondary text-center">🔄 Buscando promociones...</div>
        }
        else if (ListaPromo.Count == 0)
        {
            <div class="alert alert-warning text-center">⚠️ No existen promociones activas</div>
        }
        else
        {
            <div class="table-responsive">
                <table class="table table-bordered table-hover align-middle">
                    <thead class="table-light">
                        <tr>
                            <th>Título</th>
                            <th>Descripción</th>
                            <th>Fecha inicio</th>
                            <th>Fecha fin</th>
                            <th>Activa</th>
                            <th class="text-center">Editar</th>
                            <th class="text-center">Eliminar</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var item in ListaPromo)
                        {
                            <tr>
                                <td>@item.Titulo</td>
                                <td>@item.Descripcion</td>
                                <td>@item.Fecha_Inicio.ToShortDateString()</td>
                                <td>@item.Fecha_Fin.ToShortDateString()</td>
                                <td>
                                    @if (item.Activa)
                                    {
                                        <span class="badge bg-success">Sí</span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-secondary">No</span>
                                    }
                                </td>
                                <td class="text-center">
                                    <a class="btn btn-primary btn-sm" href="/api/Promocion/Editar/@item.Id">✏️ Editar</a>
                                </td>
                                <td class="text-center">
                                    <button class="btn btn-danger btn-sm" @onclick="() => Eliminar(item)">🗑️ Eliminar</button>
                                </td>

                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    }
    else
    {
        <div class="alert alert-danger text-center">❌ Error: @Mensaje</div>
    }
</div>

<Confirmacion @ref="confirmacion"
              Titulo="⚠️ Alerta"
              textCancelar="Cancelar"
              onCancel="@Cancelar"
              onConfirm="@Eliminar">
    <h5 class="text-danger text-center">Está por eliminar una promocion. ¿Desea continuar?</h5>
</Confirmacion>

           

@code {

    Confirmacion confirmacion;

    Promocion promocion;

    Promocion? promocionBorrar = null;


    List<Promocion> ListaPromo;

    string Mensaje;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        await Leer();
    }

    private async Task Leer()
    {
        var resp = await http.Get<List<Promocion>>("api/Promocion");

        string Mensaje = "";

        if (!resp.Error)
        {
            ListaPromo = resp.Respuesta;
        }
        else
        {
            Mensaje = await resp.ObtenerError();
        }
    }

    private async Task Eliminar(Promocion promocion)
    {
        promocionBorrar = promocion;
        confirmacion.Ver();
    }

    // cancelar: oculta modal y limpia selección
    private void Cancelar()
    {
        confirmacion.Ocultar();
        promocionBorrar = null;
    }

    // CORREGIDO: método sin parámetros invocado por onConfirm="@Borrar"
    private async Task Eliminar()
    {
        if (promocionBorrar == null)
        {
            confirmacion.Ocultar();
            return;
        }

        var respuesta = await http.Delete($"api/Promocion/{promocionBorrar.Id}");

        if (respuesta.Error)
        {
            Mensaje = "No se pudo borrar la promocion";
        }
        else
        {
            await Leer();
        }

        // limpiar y cerrar modal
        promocionBorrar = null;
        confirmacion.Ocultar();
    }



}
