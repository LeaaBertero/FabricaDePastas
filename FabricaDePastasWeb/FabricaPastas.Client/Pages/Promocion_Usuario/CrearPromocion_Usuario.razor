@page "/api/Promocion_Usuario/Crear"
@inject IHTTPServicio http;
@inject NavigationManager navigationManager;


<!DOCTYPE html>
<html>

<head>
    <title>Promocion producto</title>
</head>

<body>

    <header>

        <h1 class="text-center">Promocion de los productos</h1>

        <EditForm Model="promocion_usuario" OnValidSubmit="Grabar">
            <DataAnnotationsValidator />

            <div class="form-group">
                <label for="descuento_pocercentaje">Fecha de inicio</label>
                <input placeholder="Fecha de inicio" type="date"  
                       @bind="promocion_usuario.Fecha_Inicio_Promo" step="7" class="form-control" />
                <ValidationMessage For="@(() => promocion_usuario.Fecha_Inicio_Promo)" />
            </div>
            
            <div class="form-group">
                <label for="descuento_pocercentaje">Fecha fin de promo</label>
                <input placeholder="Fecha de inicio" step="7" type="date"
                       @bind="promocion_usuario.Fecha_Fin_Promo" class="form-control" />
                <ValidationMessage For="@(() => promocion_usuario.Fecha_Fin_Promo)" />
            </div>

     
            <div>
                <button class="btn btn-primary" type="submit">Cargar promo !</button>
                <button class="btn btn-secondary" onclick="Cancelar">Cancelar</button>
            </div>

        </EditForm>

    </header>

    <main>

    </main>

    <footer>
        <p>&copy; 2025 La Nonna Personal</p>
    </footer>

</body>

</html>

@code {
    private Promocion_Usuario promocion_usuario = new Promocion_Usuario();

    private async Task Grabar()
    {
        var httpRespuesta = await http.Post<Promocion_Usuario>("api/Promocion_Usuario", promocion_usuario);

        if (httpRespuesta.Error)
        {
            var body = httpRespuesta.HttpResponseMessage;
        }
    }

    private void Cancelar()
    {
        navigationManager.NavigateTo("/");
    }
}
