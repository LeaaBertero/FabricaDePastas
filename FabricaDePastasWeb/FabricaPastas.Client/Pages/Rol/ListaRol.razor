@page "/api/Rol"
@inject IHTTPServicio http;
@inject HttpClient Http;
@inject NavigationManager navigationManager;





    <h1 class="text-center">Seleccione el rol</h1>
        
    <h2>Lista roles</h2>

      



    <select @bind="RolSeleccionado" class="form-select">
        <option disabled selected value="">-- Seleccione un rol --</option>
        @if (ListaRoles != null)
        {
            foreach (var rol in ListaRoles)
            {
                <option value="@rol.Nombre_rol">@rol.Nombre_rol</option>
            }
        }
        @if (!string.IsNullOrEmpty(RolSeleccionado))
        {
            <p>Rol seleccionado: <strong>@RolSeleccionado</strong></p>
        }
    </select>

    <button class="btn btn-primary" @onclick="IngresarConRol">Ingresar</button>

          

    @if (Mensaje == null)
    {
        if (ListaRoles == null)
        {
            <p>Buscando....</p>
        }
        else if (ListaRoles.Count == 0)
        {
            <p>No existen roles de usuarios cargados</p>
        }
        @*   else
        {
            @foreach (var item in ListaRoles)
            {
                <tr>
                    <td>@item.Nombre_rol</td>
                </tr>

            }
        } *@
    }
    else
    {
        <p> Error: @Mensaje</p>
    }


      


@code {

    private void IngresarConRol()
    {
        if (!string.IsNullOrEmpty(RolSeleccionado))
        {
            navigationManager.NavigateTo($"/Listas");
        }
    }
    //selecciona el rol de usuario
    private string RolSeleccionado;



    private List<Rol> ListaRoles;

    string Mensaje;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ListaRoles = await Http.GetFromJsonAsync<List<Rol>>("/api/Rol");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error obteniendo tipos de cliente: {ex.Message}");
        }
    }

}




