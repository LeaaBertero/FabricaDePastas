@page "/api/Rol"
@using FabricaPastas.Client.Shared   
@inject IHTTPServicio http;
@inject HttpClient Http;
@inject NavigationManager navigationManager;
@inject IJSRuntime jsRuntime   


@* <h1 class="text-center">Seleccione el rol</h1>
        
<h2>Lista roles</h2>

<select @bind="RolSeleccionado" class="form-select">
    <option disabled selected value="">-- Seleccione un rol --</option>
    @if (ListaRoles != null)
    {
        foreach (var rol in ListaRoles)
        {
            <option value="@rol.Nombre_rol">@rol.Nombre_rol</option>
        }
    }
    @if (!string.IsNullOrEmpty(RolSeleccionado))
    {
        <p>Rol seleccionado: <strong>@RolSeleccionado</strong></p>
    }
</select>

<button class="btn btn-primary" @onclick="IngresarConRol">Ingresar</button> *@




<h1 class="text-center mb-4">🧑‍💼 Seleccione el rol</h1>

<div class="container">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <label for="RolSeleccionado" class="form-label">Lista de roles disponibles</label>
            <select id="RolSeleccionado" @bind="RolSeleccionado" class="form-select">
                <option disabled selected value="">-- Seleccione un rol --</option>
                @if (ListaRoles != null)
                {
                    foreach (var rol in ListaRoles)
                    {
                        <option value="@rol.Nombre_rol">@rol.Nombre_rol</option>
                    }
                }
            </select>

            @if (!string.IsNullOrEmpty(RolSeleccionado))
            {
                <div class="alert alert-info mt-3 text-center">
                    Rol seleccionado: <strong>@RolSeleccionado</strong>
                </div>
            }

            <div class="text-center mt-4">
                <button class="btn btn-success me-2" @onclick="IngresarConRol">✅ Ingresar</button>
                
            </div>
        </div>
    </div>
</div>



@if (ListaRoles != null && ListaRoles.Count > 0)
{
    <table class="table table-striped table-bordered mt-4">
        <thead class="table-dark">
            <tr>
                <th>Rol</th>
                <th>Acciones</th> 
            </tr>
        </thead>
        <tbody>
            @foreach (var rol in ListaRoles)
            {
                <tr>
                    <td>@rol.Nombre_rol</td>
                    <td>
                      
                        <button class="btn btn-danger btn-sm" @onclick="() => ConfirmarEliminar(rol)">
                            🗑️ Eliminar
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}


<Confirmacion @ref="confirmacion"
              Titulo="⚠️ Alerta"
              textCancelar="Cancelar"
              textOk="Eliminar"
              onCancel="@Cancelar"
              onConfirm="@Eliminar">
    <h5 class="text-danger text-center">Está por eliminar un rol. ¿Desea continuar?</h5>
</Confirmacion>


@if (Mensaje == null)
{
    if (ListaRoles == null)
    {
        <p>Buscando....</p>
    }
    else if (ListaRoles.Count == 0)
    {
        <p>No existen roles de usuarios cargados</p>
    }
}
else
{
    <p> Error: @Mensaje</p>
}



@code {
    // ➡️ agregado: referencia al componente Confirmacion
    Confirmacion confirmacion;

    //navega a la pagina de listas segun el rol seleccionado
    private void IngresarConRol()
    {
        if (!string.IsNullOrEmpty(RolSeleccionado))
        {
            navigationManager.NavigateTo($"/Listas");
        }
    }
    //selecciona el rol de usuario
    private string RolSeleccionado;

    private List<Rol> ListaRoles;

    string Mensaje;

    // ➡️ agregado: variable para guardar el rol seleccionado para borrar
    private Rol? rolBorrar = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            ListaRoles = await Http.GetFromJsonAsync<List<Rol>>("/api/Rol");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error obteniendo tipos de cliente: {ex.Message}");
        }
    }

    // ➡️ agregado: muestra el modal de confirmación y guarda el rol a borrar
    private void ConfirmarEliminar(Rol rol)
    {
        rolBorrar = rol;
        confirmacion.Ver();
    }

    // ➡️ agregado: método invocado al presionar "Cancelar" en el modal
    private void Cancelar()
    {
        confirmacion.Ocultar();
        rolBorrar = null;
    }

    // ➡️ agregado: método invocado por onConfirm del modal (sin parámetros)
    private async Task Eliminar()
    {
        if (rolBorrar == null)
        {
            confirmacion.Ocultar();
            return;
        }

        try
        {
            var response = await Http.DeleteAsync($"/api/Rol/{rolBorrar.Id}");
            if (response.IsSuccessStatusCode)
            {
                // refrescar lista
                ListaRoles = await Http.GetFromJsonAsync<List<Rol>>("/api/Rol");
            }
            else
            {
                Mensaje = "No se pudo eliminar el rol.";
            }
        }
        catch (Exception ex)
        {
            Mensaje = $"Error al eliminar: {ex.Message}";
        }

        // limpiar y cerrar modal
        rolBorrar = null;
        confirmacion.Ocultar();
    }


}
